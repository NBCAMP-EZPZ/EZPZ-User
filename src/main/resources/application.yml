spring:
  profiles:
    active:
      local

  datasource:
    url: ${DATASOURCE_URL}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 10  # max_connections에 여유를 두기 위해 10~20 정도로 설정합니다.
      #      idle-timeout: 150000  # 150,000밀리초 = 150초, wait_timeout보다 약간 낮게 설정하여 유휴 연결을 적절히 닫습니다.
      #      max-lifetime: 170000  # 170,000밀리초 = 170초, RDS의 wait_timeout보다 짧게 설정하여 연결이 강제로 닫히기 전에 HikariCP가 미리 연결을 회수하도록 합니다.
      connection-timeout: 30000  # 30,000밀리초 = 30초, connect_timeout보다 짧게 설정하여 연결 시도를 제한합니다.
      leak-detection-threshold: 2000  # 2초, 연결이 예상보다 오래 사용되는 경우를 감지하기 위한 설정입니다.


  servlet:
    multipart:
      maxFileSize: 10MB
      maxRequestSize: 20MB

  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO}  # Hibernate 자동 DDL 생성 옵션

    properties:
      hibernate:
        default_batch_fetch_size: 1000
        format_sql: true  # SQL 쿼리 포맷팅 여부 - 프로덕션 환경에서는 보안, 성능 고려해서 사용
        use_sql_comments: true  # SQL 쿼리 주석 사용 여부 - 보안, 성능 이슈, (실행되는 JPQL을 볼 수 있다.)

  data:
    redis:
      mode: standalone  # 테스트에서는 로컬 Redis 사용
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

logging.level:
  org.hibernate.SQL: warn  # Hibernate SQL 쿼리를 debug 레벨로 설정하여 로깅합니다.
  org.hibernate.orm.jdbc.bind: trace  # 스프링 부트 3.x, Hibernate 6.x에서 JDBC 바인딩을 trace 레벨로 설정합니다.

jwt:
  secret:
    key: ${JWT_SECRET_KEY}
  access-token:
    ttl: ${ACCESS_TOKEN_TTL}
  refresh-token:
    ttl: ${REFRESH_TOKEN_TTL}

server:
  port: ${SERVER_PORT}